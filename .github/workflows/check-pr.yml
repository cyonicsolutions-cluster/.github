name: Check All Repos for Pull Requests and Issues

on:
  schedule:
    - cron: '0 7 * * 1-5'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check_repos:
    runs-on: ubuntu-latest

    steps:
      - name: Check repositories in the organization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
          TARGET_REPO: "getcyonic/target-repo"
        run: |
          ORG="cyonicsolutions-cluster"
          PR_MESSAGE="**Pull Requests are not accepted.** Please visit https://github.com/getcyonic/${TARGET_REPO}/compare and submit your pull request there with the same content.\nThank you!"
          ISSUE_MESSAGE="**Issues are not accepted.** Please visit https://github.com/getcyonic/${TARGET_REPO}/issues to submit your issue there.\nThank you!"

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "GITHUB_TOKEN is not set. Exiting..."
            exit 1
          fi

          response=$(curl -s -o repos_response.txt -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/$ORG/repos?per_page=100")

          if [ "$response" -ne 200 ]; then
            echo "Error: Unable to fetch repositories. Status code: $response"
            cat repos_response.txt
            exit 1
          fi

          repos=$(jq -r '.[].full_name' repos_response.txt)

          for repo in $repos; do
            echo "Checking repository: $repo"

            # Check for open PRs
            prs_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/pulls")
            echo "PRs response: $prs_response" # Debug line

            # Handle possible empty response more gracefully
            if [[ "$prs_response" == "[]" || -z "$prs_response" ]]; then
              echo "No open PRs found in $repo."
              prs="[]"
            else
              prs=$(echo "$prs_response" | jq -c '.[]')
            fi

            if [[ "$prs" != "[]" ]]; then
              for pr_info in $prs; do
                pr_number=$(echo "$pr_info" | jq -r '.number')
                pr_author=$(echo "$pr_info" | jq -r '.user.login')
                pr_title=$(echo "$pr_info" | jq -r '.title')
                pr_body=$(echo "$pr_info" | jq -r '.body')
                pr_head=$(echo "$pr_info" | jq -r '.head.ref')
                pr_base=$(echo "$pr_info" | jq -r '.base.ref')

                echo "Found open PR: $pr_number in $repo by $pr_author"

                member_check=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/$ORG/members/$pr_author")
                echo "Member check response: $member_check" # Debug line

                if [[ "$(echo "$member_check" | jq -r '.message')" == "Not Found" ]]; then
                  echo "$pr_author is not a member of the organization."

                  curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                    -d "{\"body\": \"$PR_MESSAGE\"}" \
                    "https://api.github.com/repos/$repo/issues/$pr_number/comments"

                  new_pr_response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                    -d "{\"title\": \"$pr_title\", \"head\": \"$pr_head\", \"base\": \"$pr_base\", \"body\": \"$pr_body\"}" \
                    "https://api.github.com/repos/$TARGET_REPO/pulls")

                  new_pr_number=$(echo "$new_pr_response" | jq -r '.number')

                  if [[ "$new_pr_number" != "null" ]]; then
                    echo "Created a new PR: #$new_pr_number in $TARGET_REPO"
                  else
                    echo "Failed to create PR in $TARGET_REPO"
                    echo "$new_pr_response"
                  fi

                  curl -s -X PUT -H "Authorization: token $GITHUB_TOKEN" \
                    "https://api.github.com/repos/$TARGET_REPO/collaborators/$GITHUB_USER"
                else
                  echo "$pr_author is a member of the organization. Not locking the PR."
                fi
              done
            fi

            # Check for open issues
            issues_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/issues?state=open")
            echo "Issues response: $issues_response" # Debug line

            # Handle possible empty response for issues
            if [[ "$issues_response" == "[]" || -z "$issues_response" ]]; then
              echo "No open issues found in $repo."
              issues="[]"
            else
              issues=$(echo "$issues_response" | jq -c '.[]')
            fi

            if [[ "$issues" != "[]" ]]; then
              for issue_info in $issues; do
                issue_number=$(echo "$issue_info" | jq -r '.number')
                issue_author=$(echo "$issue_info" | jq -r '.user.login')
                issue_title=$(echo "$issue_info" | jq -r '.title')
                issue_body=$(echo "$issue_info" | jq -r '.body')

                echo "Found open issue: $issue_number in $repo by $issue_author"

                member_check=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/$ORG/members/$issue_author")
                echo "Member check response: $member_check" # Debug line

                if [[ "$(echo "$member_check" | jq -r '.message')" == "Not Found" ]]; then
                  echo "$issue_author is not a member of the organization."

                  curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                    -d "{\"body\": \"$ISSUE_MESSAGE\"}" \
                    "https://api.github.com/repos/$repo/issues/$issue_number/comments"
                else
                  echo "$issue_author is a member of the organization. Not locking the issue."
                fi
              done
            fi
          done
