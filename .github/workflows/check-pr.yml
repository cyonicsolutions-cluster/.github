name: Check All Repos for Pull Requests

on:
  pull_request:
    types: [opened, reopened]
  schedule:
    - cron: '0 0 * * 1-5'
  workflow_dispatch:
  
permissions:
  contents: read
  pull-requests: write

jobs:
  check_prs:
    runs-on: ubuntu-latest

    steps:
      - name: Check repositories in the organization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ORG="cyonicsolutions-cluster"
          PR_MESSAGE="This repository only accepts mirror pushes.\nPull requests cannot be accepted without you being from our company."
          
          # Check if the token is set
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "GITHUB_TOKEN is not set. Exiting..."
            exit 1
          fi

          # Obter a lista de repositórios na organização
          response=$(curl -s -o repos_response.txt -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/$ORG/repos?per_page=100")

          if [ "$response" -ne 200 ]; then
            echo "Error: Unable to fetch repositories. Status code: $response"
            cat repos_response.txt
            exit 1
          fi

          repos=$(cat repos_response.txt | jq -r '.[].full_name')

          for repo in $repos; do
            echo "Checking repository: $repo"

            # Obter PRs abertos
            prs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/pulls" | jq -r '.[] | {number: .number, user: .user.login}')

            for pr_info in $(echo "$prs" | jq -c '.'); do
              pr_number=$(echo "$pr_info" | jq -r '.number')
              pr_author=$(echo "$pr_info" | jq -r '.user')

              echo "Found open PR: $pr_number in $repo by $pr_author"

              # Verificar se o autor do PR é um membro da organização
              member_check=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/$ORG/members/$pr_author")

              if [ "$(echo "$member_check" | jq -r '.message')" == "Not Found" ]; then
                echo "$pr_author is not a member of the organization."

                # Comentar no PR
                curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                  -d "{\"body\": \"$PR_MESSAGE\"}" \
                  "https://api.github.com/repos/$repo/issues/$pr_number/comments"

                # Fechar o PR
                curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
                  -d "{\"state\": \"closed\"}" \
                  "https://api.github.com/repos/$repo/pulls/$pr_number"
              else
                echo "$pr_author is a member of the organization. Not closing the PR."
              fi
            done
          done
